---
swagger: "2.0"
info:
  description: "This is a Flashcard server.  You can find out more about Swagger at\
    \ <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net,\
    \ #swagger.  You can use the api key \"special-key\" to test the authorization\
    \ filters. Test Change"
  version: "1.0.0"
  title: "Swagger Flashcard YAML"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/better-flashcard-racer/testar/1.0.0"
tags:
- name: "decks"
  description: "All about decks data"
schemes:
- "https"
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /decks:
    get:
      tags:
      - "deck"
      summary: "Find all decks available"
      description: "Return all set of decks"
      operationId: "getDecks"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Decks"
        500:
          description: "An unexpected error occured."
      x-swagger-router-controller: "DeckController"
    post:
      tags:
      - "deck"
      summary: "Create a new deck"
      parameters:
      - in: "body"
        name: "deck"
        description: "The deck object that will be inserted"
        required: false
        schema:
          $ref: "#/definitions/Deck"
      responses:
        201:
          description: "Created entity"
        500:
          description: "An unexpected error occured."
  /decks/{id}:
    get:
      tags:
      - "deck"
      summary: "Find deck by ID"
      description: "Returns a single set of deck"
      operationId: "getDeckById"
      parameters:
      - name: "id"
        in: "path"
        description: "The identifier of the object"
        required: true
        type: "integer"
        x-example: 1
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deck"
        404:
          description: "Deck not found"
        500:
          description: "An unexpected error occured."
      x-swagger-router-controller: "DeckController"
    put:
      tags:
      - "deck"
      summary: "Updates a deck in the store with form data"
      description: "Update a deck by ID"
      operationId: "updateDeck"
      parameters:
      - name: "id"
        in: "path"
        description: "The identifier of the object"
        required: true
        type: "integer"
        x-example: 1
      - in: "body"
        name: "deck"
        description: "Deck object that will be changed"
        required: true
        schema:
          $ref: "#/definitions/Deck"
      responses:
        204:
          description: "Deck sucessfully updated."
        500:
          description: "An unexpected error occured."
    delete:
      tags:
      - "deck"
      summary: "Delete a deck"
      description: "deleting deck by id and using teacher account"
      operationId: "deleteDeck"
      parameters:
      - name: "id"
        in: "path"
        description: "The identifier of the object"
        required: true
        type: "integer"
        x-example: 1
      responses:
        204:
          description: "Deck successfully deleted."
        404:
          description: "The object was not found in"
        500:
          description: "An unexpected error occured."
  /generate-cards:
    post:
      tags:
      - "generate"
      summary: "To generate card by request"
      description: "Return all set of decks"
      operationId: "generateCards"
      parameters:
      - in: "body"
        name: "generatesCard"
        description: "The request from frontend"
        required: false
        schema:
          $ref: "#/definitions/GenerateCards"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deck"
        500:
          description: "An unexpected error occured."
      x-swagger-router-controller: "DeckController"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Card:
    properties:
      id:
        type: "integer"
      problem:
        type: "string"
      answer:
        type: "string"
    xml:
      name: "Card"
  Deck:
    required:
    - "user_id"
    properties:
      id:
        type: "integer"
      numProblems:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      user_id:
        type: "integer"
      user_name:
        type: "string"
      created:
        type: "string"
      changed:
        type: "string"
      private:
        type: "boolean"
      flashcards:
        $ref: "#/definitions/Card"
    xml:
      name: "Deck"
  Decks: {}
  Operators:
    properties:
      minus:
        type: "boolean"
      add:
        type: "boolean"
      div:
        type: "boolean"
      multi:
        type: "boolean"
  GenerateCards:
    properties:
      min:
        type: "integer"
      max:
        type: "integer"
      numberSolution:
        type: "integer"
      operators:
        $ref: "#/definitions/Operators"
parameters:
  id:
    name: "id"
    in: "path"
    description: "The identifier of the object"
    required: true
    type: "integer"
    x-example: 1
responses:
  Standard500ErrorResponse:
    description: "An unexpected error occured."
  ObjectDoesNotExistResponse:
    description: "The object was not found in"
  Standard201CreatedResponse:
    description: "Created entity"
x-example: 1
