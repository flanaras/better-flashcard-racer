swagger: "2.0"
info:
  description: "This is a Flashcard server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  You can use the api key \"special-key\" to test the authorization filters"
  version: 1.0.0
  title: Swagger Flashcard YAML
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /v1
tags:
  - name: decks
    description: All about decks data
#  - name: user
#    description: Access to Petstore orders
#    externalDocs:
#      description: Find out more about our store
#      url: "http://swagger.io"
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  api_key:
    type: apiKey
    in: header
    name: api_key    
security:
  - api_key: []
paths:
  /decks:
    get:
      tags:
        - deck
      summary: Find all decks available
      x-swagger-router-controller: DeckController
      description: Return all set of decks
      operationId: getDecks
      parameters:
        - $ref: "#/parameters/user_id"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Decks"
        500:
          $ref: "#/responses/Standard500ErrorResponse"  
    post:
      tags:
        - deck
      summary: Create a new deck
      parameters:
        - name: deck
          in: body
          description: The deck object that will be inserted
          schema:
            $ref: "#/definitions/Deck"
      responses:
        201:
          $ref: "#/responses/Standard201CreatedResponse" 
        500:
          $ref: "#/responses/Standard500ErrorResponse"  
  "/decks/{id}":
    parameters:
      - $ref: "#/parameters/id"
    get:
      tags:
        - deck
      summary: Find deck by ID
      x-swagger-router-controller: DeckController
      description: Returns a single set of deck
      operationId: getDeckById
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Deck"
        404:
          description: Deck not found
        500:
          $ref: "#/responses/Standard500ErrorResponse"  
    put:
      tags:
        - deck
      summary: Updates a deck in the store with form data
      description: "Update a deck by ID"
      operationId: updateDeck
      parameters:
        - name: deck
          in: body
          description: Deck object that will be changed
          required: true
          schema:
            $ref: "#/definitions/Deck"
      responses:
        204:
          description: Deck sucessfully updated.
        500:
          $ref: "#/responses/Standard500ErrorResponse"  
    delete:
      tags:
        - deck
      summary: Delete a deck
      description: "deleting deck by id and using teacher account"
      operationId: deleteDeck
      responses:
        204:
          description: Deck successfully deleted.
        404:
          $ref: "#/responses/ObjectDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /user:
    get:
      x-swagger-router-controller: UserController
      description: Return all set of decks
      operationId: getUsers
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Users"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  "/user/{id}":
    parameters:
      - $ref: "#/parameters/user_id"
    get:
      tags:
        - user
      summary: Find a user by ID
      x-swagger-router-controller: UserController
      description: Return a user object identified by its id
      operationId: getUserById
      responses:
        200:
          description: successful operation
          schema:
              $ref: "#/definitions/User"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
definitions:
  User:
    properties:
      id:
        type: integer
      username:
        type: string
      auth_level:
        type: string
    xml:
      name: User
  Users:
    type: array
    items:
      $ref: "#/definitions/User"
  Card:
    properties:
      id:
        type: integer
      problem:
        type: string
      answer:
        type: string
    xml:
      name: Card
  Deck:    
    required:
      - user_id
    properties:
      id:
        type: integer
        format: int64
      numProblems:
        type: integer
        format: int32
      name:
        type: string
      description:
        type: string
      user_id: 
        type: integer
      user_name: 
        type: string
      created:
        type: string
      changed:
        type: string
      private:
        type: boolean
      flashcards:
        $ref: "#/definitions/Card"
    xml:
      name: Deck
  Decks:
    type: array
    items:
      $ref: "#/definitions/Deck"
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
#    schema:
#      $ref: "#/definitions/Error"
  ObjectDoesNotExistResponse:
    description: The object was not found in
  Standard201CreatedResponse:
    description: Created entity
parameters:
  id:
    name: id        
    in: path
    required: true
    description: The identifier of the object
    type: integer
    x-example: 1
  user_id:
    name: user_id
    in: query
    description: The id for the user
    type: integer
    x-example: 1