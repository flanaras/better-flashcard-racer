---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
# schemes:
# - "http"
paths:
  /decks:
    get:
      tags:
        - deck
      summary: Find all decks available
      x-swagger-router-controller: DeckController
      description: Return all set of decks
      operationId: getDecks
      parameters:
        - $ref: "#/parameters/user_id"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Decks"
          examples:
            application/json:
              - id: 1
                numProblems: 5
                name: A test deck
                description: Description for a test deck
                user_id: 2
                user_name: John
                created: 2017-01-25T20:17:45.000Z
                changed: 2017-01-25T20:17:45.000Z
                private: false
                flashcards:
                  - id: 1
                    problem: 1+1
                    solution: 2
                  - id: 2
                    problem: 2+2
                    solution: 4
                  - id: 3
                    problem: 3+3
                    solution: 6
                  - id: 4
                    problem: 4+4
                    solution: 8
                  - id: 5
                    problem: 5+5
                    solution: 10

              - id: 2
                numProblems: 5
                name: Another test deck
                description: Description for a test deck2
                user_id: 2
                user_name: John
                created: 2017-01-25T20:17:45.000Z
                changed: 2017-01-25T20:17:45.000Z
                private: false
                flashcards:
                  - id: 12
                    problem: 1-1
                    solution: 0
                  - id: 23
                    problem: 2-2
                    solution: 0
                  - id: 33
                    problem: 4-3
                    solution: 1
                  - id: 44
                    problem: 5-2
                    solution: 3
                  - id: 55
                    problem: 7-3
                    solution: 4
    post:
      tags:
        - deck
      summary: Create a new deck
      parameters:
        - name: deck
          in: body
          description: The deck object that will be inserted
          schema:
            $ref: "#/definitions/Deck"
      responses:
        201:
          $ref: "#/responses/Standard201CreatedResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /decks/{id}:
    parameters:
      - $ref: "#/parameters/id"
    get:
      tags:
        - deck
      summary: Find deck by ID
      x-swagger-router-controller: DeckController
      description: Returns a single set of deck
      operationId: getDeckById
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Deck"
          examples:
            application/json:
              - id: 1
                numProblems: 5
                name: A test deck
                description: Description for a test deck
                user_id: 2
                user_name: John
                created: 2017-01-25T20:17:45.000Z
                changed: 2017-01-25T20:17:45.000Z
                private: false
                flashcards:
                  - id: 1
                    problem: 1+1
                    solution: 2
                  - id: 2
                    problem: 2+2
                    solution: 4
                  - id: 3
                    problem: 3+3
                    solution: 6
                  - id: 4
                    problem: 4+4
                    solution: 8
                  - id: 5
                    problem: 5+5
                    solution: 10


    put:
      tags:
        - deck
      summary: Updates a deck in the store with form data
      description: "Update a deck by ID"
      operationId: updateDeck
      parameters:
        - name: deck
          in: body
          description: Deck object that will be changed
          required: true
          schema:
            $ref: "#/definitions/Deck"
      responses:
        204:
          description: Deck sucessfully updated.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    delete:
      tags:
        - deck
      summary: Delete a deck
      description: "deleting deck by id and using teacher account"
      operationId: deleteDeck
      responses:
        204:
          description: Deck successfully deleted.
        404:
          $ref: "#/responses/ObjectDoesNotExistResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"

  /users:
      get:
        x-swagger-router-controller: UserController
        description: Return all set of users
        operationId: getUsers
        responses:
          200:
            description: successful operation
            schema:
              $ref: "#/definitions/Users"
            examples:
              application/json:
                - id: 1
                  auth_level: admin
                  username: Astrid
                - id: 2
                  auth_level: teacher
                  username: Teachername
                - id: 3
                  auth_level: student
                  username: Studentname
          500:
            $ref: "#/responses/Standard500ErrorResponse"

        post:
              tags:
                - user
              summary: Create a new user
              parameters:
                - name: user
                  in: body
                  description: The user object that will be inserted
                  schema:
                    $ref: "#/definitions/Users"
              responses:
                201:
                  $ref: "#/responses/Standard201CreatedResponse"
                500:
                  $ref: "#/responses/Standard500ErrorResponse"
  /users/{id}:
      parameters:
        - $ref: "#/parameters/id"
      get:
        tags:
          - user
        summary: Find a user by ID
        x-swagger-router-controller: UserController
        description: Return a user object identified by its id
        operationId: getUserById
        responses:
          200:
            description: successful operation
            schema:
                $ref: "#/definitions/User"
            examples:
              application/json:
                - id: 1
                  auth_level: admin
                  username: Astrid
          500:
            $ref: "#/responses/Standard500ErrorResponse"
  /login:
      post:
        tags:
          - user
        summary: login
        parameters:
          - name: loginInfo
            in: body
            description: Login attempt
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                 type: string
        responses:
          200:
            description: successful operation
            schema:
                $ref: "#/definitions/User"
            examples:
              application/json:
                - id: 1
                  auth_level: admin
                  username: Astrid
          500:
            $ref: "#/responses/Standard500ErrorResponse"
definitions:
  User:
      properties:
        id:
          type: integer
        username:
          type: string
        auth_level:
          type: string
      xml:
        name: User
  Users:
      type: array
      items:
        $ref: "#/definitions/User"
  Card:
      properties:
        id:
          type: integer
        problem:
          type: string
        answer:
          type: string
      xml:
        name: Card

  Card:
    properties:
      id:
        type: integer
      problem:
        type: string
      solution:
        type: string

    xml:
      name: Card
  Cards:
    type: array
    items:
      $ref: "#/definitions/Card"

  Deck:
    required:
      - user_id
    properties:
      id:
        type: integer
        format: int64
      numProblems:
        type: integer
        format: int32
      name:
        type: string
      description:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
      created:
        type: string
      changed:
        type: string
      private:
        type: boolean
      flashcards:
        type: array
        items:
          $ref: "#/definitions/Cards"
    xml:
      name: Deck
  Decks:
    type: array
    items:
      $ref: "#/definitions/Deck"
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
#    schema:
#      $ref: "#/definitions/Error"
  ObjectDoesNotExistResponse:
    description: The object was not found in
  Standard201CreatedResponse:
    description: Created entity
parameters:
  id:
    name: id
    in: path
    required: true
    description: The identifier of the object
    type: integer
    x-example: 1
  user_id:
    name: user_id
    in: query
    description: The id for the user
    type: integer
    x-example: 1
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /johnTunell/racer/1.0.0
schemes:
 - https
 - http